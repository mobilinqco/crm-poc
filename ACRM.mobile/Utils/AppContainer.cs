using System;using ACRM.mobile.CustomControls;using ACRM.mobile.DataAccess;using ACRM.mobile.DataAccess.Local;using ACRM.mobile.DataAccess.Local.CrmDataContext;using ACRM.mobile.DataAccess.Network;using ACRM.mobile.DataAccess.Network.NetworkHttpClient;using ACRM.mobile.Domain.EmailGenerator;using ACRM.mobile.Domain.EmailGenerator.Interfaces;using ACRM.mobile.Domain.SettingsHelper;using ACRM.mobile.Localization;using ACRM.mobile.Logging;using ACRM.mobile.Services;using ACRM.mobile.Services.Contracts;using ACRM.mobile.Services.Processors;using ACRM.mobile.Services.SubComponents;using ACRM.mobile.Services.Utils;using ACRM.mobile.ViewModels;using ACRM.mobile.ViewModels.Base;using Autofac;using Xamarin.Essentials;using Xamarin.Forms;namespace ACRM.mobile.Utils{    public class AppContainer    {        private static IContainer _container;        public AppContainer()        {        }        public static void RegisterDependencies()        {            var builder = new ContainerBuilder();            string appLocalsPath = "";            if (DeviceInfo.Platform == DevicePlatform.Unknown)            {                appLocalsPath = Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData);            }            else            {                try                {                    appLocalsPath = FileSystem.AppDataDirectory;                }                catch (Exception e)                {                    appLocalsPath = "c:/tmp";                }            }            var settings = SettingsParser.LoadSettingsAsync().GetAwaiter().GetResult();            var deviceCalendarService = DependencyService.Get<IDeviceCalendarService>();            var docHelperService = DependencyService.Get<IDocHelperService>();            // DataAccess            builder.RegisterInstance(deviceCalendarService);            builder.RegisterInstance(docHelperService);            builder.RegisterInstance(settings);            builder.RegisterType<SessionContext>()                .As<ISessionContext>()                .WithParameter("appDataPath", appLocalsPath)                .SingleInstance();            builder.RegisterType<CacheService>().As<ICacheService>().SingleInstance();            builder.RegisterType<NetworkRepository>().As<INetworkRepository>().SingleInstance();            builder.RegisterType<ConfigurationContext>();            builder.RegisterType<CrmDataContext>().InstancePerLifetimeScope();            builder.RegisterType<OfflineRequestsContext>();            builder.RegisterType<ConfigurationUnitOfWork>().As<IConfigurationUnitOfWork>();            builder.RegisterType<CrmDataUnitOfWork>().As<ICrmDataUnitOfWork>();            builder.RegisterType<OfflineRequestsUnitOfWork>().As<IOfflineRequestsUnitOfWork>();            builder.RegisterType<CrmDataService>().As<ICrmDataService>();            builder.RegisterType<DocumentService>().As<IDocumentService>();            builder.RegisterType<SearchContentService>().As<ISearchContentService>();            builder.RegisterType<SerialEntryService>().As<ISerialEntryService>();            builder.RegisterType<SettingsContentService>().As<ISettingsContentService>();            builder.RegisterType<RightsProcessor>().As<IRightsProcessor>();            builder.RegisterType<CrmInstancesContext>().As<ICrmInstancesContext>();            builder.RegisterType<CrmInstanceService>().As<ICrmInstanceService>().SingleInstance();            builder.RegisterType<LocalFileStorageContext>().As<ILocalFileStorageContext>();            builder.RegisterType<SyncStatusService>().As<ISyncStatusService>().SingleInstance();            builder.RegisterType<DetailsContentService>().As<IDetailsContentService>();            builder.RegisterType<CalendarEventDetailsContentService>().As<ICalendarEventDetailsContentService>();            builder.RegisterType<ImageViewContentService>().As<IImageViewContentService>();            builder.RegisterType<GeoSearchService>().As<IGeoSearchService>();            // Services            builder.RegisterType<AuthenticationService>().As<IAuthenticationService>();            builder.RegisterType<DashBoardContentService>().As<IDashboardContentService>();            builder.RegisterType<DataSyncService>().As<IDataSyncService>();            builder.RegisterType<ConfigurationService>().As<IConfigurationService>();            builder.RegisterType<HttpNetworkRetryService>().SingleInstance();            builder.RegisterType<HttpClientService>()                .WithParameter("runtimePlatform", Device.RuntimePlatform);            builder.RegisterType<LogService>().As<ILogService>().SingleInstance();            builder.RegisterType<EmailBuilder>().As<IMessageBuilder>().SingleInstance();            builder.RegisterType<EmailService>().As<IEmailService>().SingleInstance();            builder.RegisterType<TableCaptionComponent>();            builder.RegisterType<HeaderComponent>();            builder.RegisterType<ImageResolverComponent>();            builder.RegisterType<FieldGroupComponent>();            builder.RegisterType<NetworkQueryBuilder>();            builder.RegisterType<LocalQueryBuilder>();            builder.RegisterType<OfflineRequestsService>().As<IOfflineRequestsService>();            builder.RegisterType<FavoriteService>().As<IFavoriteService>();            builder.RegisterType<ModifyRecordService>().As<IModifyRecordService>();            builder.RegisterType<OpenUrlService>().As<IOpenUrlService>();            builder.RegisterType<SubNodeProcessor>();            builder.RegisterType<CharacteristicsContentService>().As<ICharacteristicsContentService>();            builder.RegisterType<CharacteristicsGroupService>().As<ICharacteristicsGroupService>();            builder.RegisterType<CharacteristicsItemService>().As<ICharacteristicsItemService>();            builder.RegisterType<ContactTimesContentService>().As<IContactTimesContentService>();            builder.RegisterType<QuestionnaireContentService>().As<IQuestionnaireContentService>();            builder.RegisterType<QuestionnaireMetaDataService>().As<IQuestionnaireMetaDataService>();            builder.RegisterType<QuestionnaireQuestionsService>().As<IQuestionnaireQuestionsService>();            builder.RegisterType<QuestionnaireAnswersService>().As<IQuestionnaireAnswersService>();
            builder.RegisterType<QuestionnaireAnswerDataService>().As<IQuestionnaireAnswerDataService>();            builder.RegisterType<AppSearchMenuService>().As<IAppSearchMenuService>();            builder.RegisterType<UserActionBuilder>().As<IUserActionBuilder>();            builder.RegisterType<NewOrEditService>().As<INewOrEditService>();            builder.RegisterType<ParticipantService>().As<IParticipantService>();            builder.RegisterType<ReportingService>().As<IReportingService>();            builder.RegisterType<SerialEntryEditService>().As<ISerialEntryEditService>();            builder.RegisterType<RepService>().As<IRepService>();            builder.RegisterType<CalendarContentService>().As<ICalendarContentService>();            builder.RegisterType<CalendarEventComponent>();            builder.RegisterType<CrmRequestBuilder>().As<ICrmRequestBuilder>();            builder.RegisterType<CatalogComponent>();            builder.RegisterType<OfflineAuthenticationService>().As<IOfflineAuthenticationService>();            builder.RegisterType<ExpandComponent>();            builder.RegisterType<FilterProcessor>().As<IFilterProcessor>();            builder.RegisterType<FieldDataProcessor>();            builder.RegisterType<RuleProcessor>().As<IRuleProcessor>();            builder.RegisterType<TokenProcessor>().As<ITokenProcessor>();            builder.RegisterType<JSProcessor>().As<IJSProcessor>();            builder.RegisterType<CrmDataFieldResolver>().As<ICrmDataFieldResolver>();            builder.RegisterType<ListingService>().As<IListingService>();            builder.RegisterType<PricingService>().As<IPricingService>();            builder.RegisterType<QueryService>().As<IQueryService>();            builder.RegisterType<QuickSearchService>().As<IQuickSearchService>();                        builder.RegisterType<QuotaService>().As<IQuotaService>();            builder.RegisterType<LinkResolverService>().As<ILinkResolverService>();            builder.RegisterType<ConnectivityManager>().SingleInstance();            builder.RegisterType<BackgroundSyncWorker>();            builder.RegisterType<BackgroundSyncManager>().SingleInstance();            builder.RegisterType<FieldGroupDataService>().As<IFieldGroupDataService>();            // ViewModels and Views            builder.RegisterType<LocalizationController>()                .As<ILocalizationController>()                .SingleInstance();            builder.RegisterType<DialogContorller>().As<IDialogContorller>();            builder.RegisterType<LoginPageViewModel>();            builder.RegisterType<LanguageSelectionPageViewModel>();            builder.RegisterType<DashboardPageViewModel>();            builder.RegisterType<DocumentPageViewModel>();             builder.RegisterType<DocumentUploadPageViewModel>();            builder.RegisterType<SignaturePageViewModel>();            builder.RegisterType<PopupListPageViewModel>();            builder.RegisterType<SearchAndListPageViewModel>();            builder.RegisterType<SerialEntryPageViewModel>();            builder.RegisterType<WebContentPageViewModel>();            builder.RegisterType<ClientReportPageViewModel>();            builder.RegisterType<ServerSelectionPageViewModel>();            builder.RegisterType<SyncPageViewModel>();            builder.RegisterType<SettingsSelectionPageViewModel>();            builder.RegisterType<LogListPageViewModel>();            builder.RegisterType<DetailsPageViewModel>();            builder.RegisterType<SettingsDetailsPageViewModel>();            builder.RegisterType<SettingsEditPageViewModel>();            builder.RegisterType<UserActionNotImplementedPageViewModel>();            builder.RegisterType<AppSearchMenuPageViewModel>();            builder.RegisterType<FilterUIPageViewModel>();            builder.RegisterType<AppToolsPageViewModel>();            builder.RegisterType<CalendarPageViewModel>();            builder.RegisterType<NewOrEditPageViewModel>();            builder.RegisterType<RecordSelectorPageViewModel>();            builder.RegisterType<MapPageViewModel>();            builder.RegisterType<LogPageViewModel>();            builder.RegisterType<DatabaseQueryPageViewModel>();            builder.RegisterType<CalendarEventDetailsPageViewModel>();            builder.RegisterType<CalendarSelectionPageViewModel>();            builder.RegisterType<RepSelectionPageViewModel>();            builder.RegisterType<ConflictListPageViewModel>();            builder.RegisterType<ImageViewPageViewModel>();            builder.RegisterType<CharacteristicsEditPageViewModel>();            builder.RegisterType<ContactTimesEditPageViewModel>();            builder.RegisterType<ContactTimesIntervalSelectionPageViewModel>();            builder.RegisterType<QuestionnaireEditPageViewModel>();            builder.RegisterType<GeoSearchPageViewModel>();            builder.RegisterType<DateTimeSelectorPageViewModel>();            builder.RegisterType<UIViewBuilder>();            builder.RegisterType<AppToolsTabItemsBuilder>();            builder.RegisterType<CalendarEventDetailsPanelViewBuilder>();            builder.RegisterType<ModifyRecordActivity>();            builder.RegisterType<NavigationController>().As<INavigationController>();            builder.RegisterType<UserActionResolver>().As<IUserActionResolver>();            builder.RegisterType<UserActionSchuttle>().As<IUserActionSchuttle>();            _container = builder.Build();        }        public static object Resolve(Type typeName)        {            return _container.Resolve(typeName);        }        public static T Resolve<T>()        {            return _container.Resolve<T>();        }    }}